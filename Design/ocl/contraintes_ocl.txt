OCL Admin - Contraintes

Identifiants uniques pour Aéroports, Ports, Gares
context Aeroport
    inv: Aeroport.allInstances() -> isUnique(ID)

Un aéroport/port/gare est identifié par trois lettres uniques à chaque aéroport [OCL]  (1.1.1, 1.2.1, 1.3.1)
context Aeroport
    inv: self.ID.oclType() = String implies self.ID.size() = 3

La partie alphabétique de l'ID d'un vol est unique à chaque compagnie et la partie numérique est unique à chaque vol au sein de la même compagnie [OCL]
context CompagnieAerienne 
    inv: self.liaisons.allInstances() -> forAll(v1, v2 : Vol | v1 <> v2 implies v1.ID.substring(1, 3) <> v2.ID.substring(1, 3))
context CompagnieAerienne
    inv: self.liaisons.allInstances() -> forAll(v1, v2: Vol | v1<> v2 implies v1.ID.substring(4, 6) = v2.ID.substring(4, 6))

L'aéroport de départ et d'arrivée d'un vol doit être différent [OCL]
context Vol
    inv: Vol.allinstances() -> forAll(a : Aeroport | ! a.origine -> includesAll(a.destination))

Tous les sièges d'une même section d'un avion/paquebot/train ont le même prix [OCL]  (1.1.5, 1.2.6, 1.3)
context Section
    inv: self.places -> forAll(s1, s2 : Siege | s1 <> s2 implies s1.prix = s2.prix)

Un itinéraire ne peut pas durer plus de 21 jours [OCL]
context Itineraire
    inv: self.date_depart.toInteger() - self.date_arrivee.toInteger() <= 21

Chaque itinéraire visite une suite de ports fixes. Le port de départ et d'arrivée doit être le même [OCL]
context Itineraire
    inv: Itineraire.allinstances() -> forAll(p : Port | p.origine -> includesAll(p.destination))

Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas [OCL]
context Itineraire
    inv: self.transports -> forAll(p1, p2 : Paquebot | p1 = p2 implies p1.date_arrivee.toInteger()  <=  p2.date_depart.toInteger())

OCL Client - Contraintes

Réservation d'une place (siège ou cabine) [OCL]
context Reservation::reserver(client : Client, place : Place) : Reservation
  pre:
    place.status = Status::Libre
    client <> null
  post:
    place.status = Status::Reserve
    result.numero <> '' and
    Reservation.allInstances() -> forAll(r | r <> result implies r.numero <> result.numero)
    result.date = CurrentDateTime()
    result.client = client

Paiement d'une place (siège ou cabine) [OCL]
context Reservation::payer()
  pre:
    self.est_paye = false
    CurrentDateTime() <= self.date + 24
  post:
    self.est_paye = true
    self.place.status = Status::Confirme

Calcul du nombre de places/cabines disponibles [OCL]
context Liaison::getPlacesDisponibles(section : Section) : Integer
  body:
    self.transport.sections->select(s | s = section).places->select(p | p.status = Status::Libre)->size()